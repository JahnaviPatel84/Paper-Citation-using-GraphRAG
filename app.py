# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hxv3dEdx-7VDSbaUY42wuZvbdqSHXfVQ
"""

import streamlit as st
import pandas as pd
from sentence_transformers import SentenceTransformer, util
from PIL import Image

# ---------------- Header + Sidebar -------------------
st.set_page_config(page_title="Graph-RAG Citation Recommender", layout="wide")

# Hero Banner
hero_img = Image.open("hero_banner.jpg")
st.image(hero_img, use_column_width=True)

# Sidebar Branding
with st.sidebar:
    st.image("images/logo.png", width=120)
    st.markdown("### 📚 Graph-RAG Citation Recommender")
    st.write("""
    Discover academic papers based on your research paragraph using an advanced graph-based semantic search system.
    """)
    st.markdown("---")
    st.markdown("**👥 Contributors:**")
    st.markdown("- Jahnavi Patel\n- Pratishtha Gaur\n- Vivek Rayalu")
    st.markdown("---")
    st.markdown("**🔗 Project Built at HDSI, UCSD**")

# ---------------- Load Data & Model -------------------
@st.cache_data
def load_data():
    concepts_df = pd.read_csv("data/leiden_clusters.csv")
    papers_df = pd.read_csv("data/Paper Info.csv")
    return concepts_df, papers_df

@st.cache_resource
def load_model():
    return SentenceTransformer("all-MiniLM-L6-v2")

concepts_df, papers_df = load_data()
model = load_model()

# ---------------- Main Interface -------------------
st.markdown("### 🔍 Discover Relevant Citations")
query = st.text_area("Paste your research paragraph here:")
citation_style = st.selectbox("📑 Choose citation format:", ["MLA", "APA", "BibTeX"])

# Action Buttons
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.button("🚀 Discover Citations")
with col2:
    st.button("📊 View Concept Clusters (coming soon)", disabled=True)
with col3:
    st.button("📁 Upload Custom Data (coming soon)", disabled=True)
with col4:
    st.button("📥 Export Recommendations (coming soon)", disabled=True)

# ---------------- Citation Discovery Logic -------------------
def find_top_concepts(query, concepts_df, model, top_k=5):
    concept_texts = concepts_df['description'].fillna('')
    concept_embeddings = model.encode(concept_texts, convert_to_tensor=True)
    query_embedding = model.encode(query, convert_to_tensor=True)
    similarities = util.pytorch_cos_sim(query_embedding, concept_embeddings)[0]
    top_indices = similarities.argsort(descending=True)[:top_k]
    results = concepts_df.iloc[top_indices.cpu().numpy()].copy()
    results['score'] = similarities[top_indices].cpu().numpy()
    return results

def find_related_papers(concepts, papers_df):
    related_papers = []
    for concept in concepts['name']:
        matching_papers = papers_df[papers_df['Title'].str.contains(concept, case=False, na=False)]
        related_papers.append((concept, matching_papers))
    return related_papers

# ---------------- Output -------------------
if st.button("🎯 Get Recommendations") and query.strip():
    st.info("Searching for relevant papers...")
    top_concepts = find_top_concepts(query, concepts_df, model)
    related_papers = find_related_papers(top_concepts, papers_df)

    st.markdown("## 📄 Recommended Papers")
    papers_shown = set()
    for _, paper_group in related_papers:
        for _, paper in paper_group.iterrows():
            if paper['Title'] in papers_shown:
                continue
            papers_shown.add(paper['Title'])
            st.markdown(f"**{paper['Title']}**")
            st.markdown(f"🖊️ {paper['Authors']} | 📅 {paper['Publishing Date']}")
            if citation_style == "MLA":
                st.markdown(f"*Citation (MLA):* {paper['Authors']}. \"{paper['Title']}\". {paper['Publishing Date']}. {paper['URL for pdf']}")
            elif citation_style == "APA":
                st.markdown(f"*Citation (APA):* {paper['Authors']} ({paper['Publishing Date']}). {paper['Title']}. {paper['URL for pdf']}")
            elif citation_style == "BibTeX":
                st.code(f"""@article{{citation,
  title={{ {paper['Title']} }},
  author={{ {paper['Authors']} }},
  journal={{arXiv}},
  year={{ {paper['Publishing Date']} }},
  url={{ {paper['URL for pdf']} }}
}}""")